#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

### Install parameters are automatically saved as settings
###
### Settings are automatically loaded as bash variables
### in every app script context, therefore typically these will exist:
### - $domain
### - $path
### - $language
### ... etc
###
### Resources defined in the manifest are provisioned prior to this script
### and corresponding settings are also available, such as:
### - $install_dir
### - $port
### - $db_name
### ...
###
### $app is the app id (i.e. 'example' for first install,
### or 'example__2', '__3'... for multi-instance installs)

# probably unnecessary but just to be sure since i'm pretty sure monerod doesn't allow
# literal true or falses in its configuration; only 1 or 0
# https://docs.getmonero.org/interacting/monero-config-file/#syntax

if [ "$prune" = true ]; then
    $prune=1
else
    $prune=0
fi

if [ "$rpc_node" = true ]; then
    $rpc_node=1
else
    $rpc_node=0
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

gpg --import binaryfate.asc

wget -O "$install_dir/hashes.txt" "https://www.getmonero.org/downloads/hashes.txt"

gpg --verify "$install_dir/hashes.txt" 2>&1 | grep "Good signature" || ynh_die "Bad signature for hashes.txt"

architecture=$(dpkg --print-architecture)

case "$architecture" in
    "amd64")
        wget --content-disposition -P "$install_dir" "https://downloads.getmonero.org/cli/linux64"
        ;;
    "arm64")
        wget --content-disposition -P "$install_dir" "https://downloads.getmonero.org/cli/linuxarm8"
        ;;
    "riscv64")
        wget --content-disposition -P "$install_dir" "https://downloads.getmonero.org/cli/linuxriscv64"
        ;;
    "i386")
        wget --content-disposition -P "$install_dir" "https://downloads.getmonero.org/cli/linux32"
        ;;
    # i think armhf is armv7 but im not sure. todo: check
    "armhf")
        wget --content-disposition -P "$install_dir" "https://downloads.getmonero.org/cli/linuxarm7"
        ;;
    *)
        ynh_die "Unsupported architecture: $architecture"
        ;;
esac

cd "$install_dir"
sha256sum -c "hashes.txt" --ignore-missing 2>&1 | grep OK || ynh_die "Bad hash for monero.tar.bz2"

# we don't delete the other monero binaries but it should be okay i think. we should have storage for an extra 150~ MB
find "$install_dir" -type f -name "monero-linux*tar.bz2" -execdir tar xvf {} \;
find "$install_dir" -type f -name "monero-linux*tar.bz2" -execdir rm {} \;
monero_dir=$(find "$install_dir" -type d -name "monero-*")
find "$monero_dir" -type f -exec mv {} . \;
rm -r "$monero_dir"

### $install_dir will automatically be initialized with some decent
### permission by default... however, you may need to recursively reapply
### ownership to all files such as after the ynh_setup_source step
chown -R "$app:www-data" "$install_dir"

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_script_progression "Making onion serivce..."

# the default tor service is hardened so it can only read and write in that directory
cat >> "/etc/tor/monero_tor.conf" << EOF
HiddenServiceDir /var/lib/tor/monero
HiddenServicePort 18089 127.0.0.1:18089    # interface for wallet ("RPC")
HiddenServicePort 18084 127.0.0.1:18084    # interface for P2P network
EOF

ynh_store_file_checksum "/etc/tor/monero_tor.conf"

cat >> "/etc/tor/torrc" << EOF
%include /etc/tor/monero_tor.conf
EOF

chmod 444 "/etc/tor/monero_tor.conf"

ynh_systemctl --service="tor" --action="enable"
ynh_systemctl --service="tor" --action="reload"

ynh_script_progression "Sleeping for 15 seconds to give time for tor to load and make our onion address..."
sleep 15s

onion_hostname=$(cat "/var/lib/tor/monero/hostname")

ynh_script_progression "Onion hostname: $onion_hostname"

ynh_script_progression "Making I2P serivce..."

cat >> /etc/i2pd/tunnels.conf.d/monero-mainnet.conf << EOF
[monero-node]
type = server
host = 127.0.0.1
# Anonymous inbound port
port = 18085
inport = 0
keys = monero-mainnet.dat

[monero-rpc]
type = server
host = 127.0.0.1
# Restricted RPC port
port = 18089
keys = monero-mainnet.dat
EOF

chmod 444 /etc/i2pd/tunnels.conf.d/monero-mainnet.conf

ynh_store_file_checksum "/etc/i2pd/tunnels.conf.d/monero-mainnet.conf"

ynh_systemctl --service="i2pd" --action="reload"

ynh_script_progression "Sleeping for 15 seconds for i2p to start and make our eepsite..."
sleep 15s

i2p_hostname=$(curl -s http://127.0.0.1:7070/?page=i2p_tunnels | grep -Eo "[a-zA-Z0-9./?=_%:-]*" | grep "18089")

ynh_script_progression "I2P hostname: $i2p_hostname"

ynh_config_add --template="monerod.conf" --destination="$install_dir/monerod.conf"

# FIXME: this should be handled by the core in the future
### You may need to use chmod 600 instead of 400,
### for example if the app is expected to be able to modify its own config
chmod 400 "$install_dir/monerod.conf"
chown "$app:$app" "$install_dir/monerod.conf"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."


# Create a dedicated systemd config
ynh_config_add_systemd

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###   - You can remove these files in conf/.
###   - Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###   - As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###   - And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS if the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)
# yunohost service add "$app" --description="A short description of the app" --log="/var/log/$app/$app.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate "$data_dir/monero.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service="$app" --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
